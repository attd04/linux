 --- task 1 --- 

# 1. create 2 directories 
mkdir d1 d2

# 2 In one of directories create 50 files with different names using for cycle. File name format: aX.txt, where X is a number from 10 to 60.
for ((i=10; i<=60; i++)); do
    touch d1/a${i}.txt
done

# 3 Display both directories and their contents (recursively)
echo 'Directories D1 and D2 after step 2:'
ls -R

# 4 Copy to another directory files that contain an even numbers only in their names.
for ((i=10; i<=60; i+=2)); do
    cp ./d1/a${i}.txt ./d2
done

# 5 Display both directories and their contents (recursively)
echo 'Directories D1 and D2 after step 4:'
ls -R

--- task 1 take 2 --- 

# Create a directory
mkdir d1

# In directory create 60 files with different names using while cycle. File name format: aXb.txt, where X is a number from 20 to 80.
for ((i=20; i<=80; i++)); do
    touch d1/a${i}b.txt
done

# Display the contents of the directory
echo "files with numbers 20 to 80"
ls -R

# Only delete files with number 2 in their names.
find d1 -type f -name "*2*.txt" -delete

# Display the contents of the directory
echo "files after deleting those with number 2"
ls -R

 --- task 2 --- 
# First script:
# 1. Create directory
mkdir d1

# 2. In directory create 60 files with different names using while cycle. File name format: aXb.txt, where X is a number from 20 to 80.
for ((i=20; i<=80; i++)); do
    touch d1/a${i}b.txt
done

# 3. In environment variable store file names which contains a number 7 only.
files_with_7=$(ls | grep '7.*\.txt')
export files_with_7

# 4. Run a second script
./second_script.sh

Second script:
1. Display the contents of the directory
2. Only delete files whose names are stored in the environment variable
3. Display the contents of the directory


--- task 2 take 2 --- not working

mkdir -p d1



for ((i=40; i<=90; i++)); do

    touch d1/ab${i}.txt

done



even_files=$(/bin/ls -d -- ./d1/*[24680].txt)

even_files=($even_files)



for file in "${even_files[@]}"; do

    echo $file

done



export even_files


./second_script.sh

echo "directory d1"

ls -R d1

for file in "${even_files[@]}"; do

    rm "$file"

done

echo ". "

echo "directory d1 after deletion"

ls -R d1



theory: 
1. What is the difference between single and double quotes?
The single quotes tell bash to print the characters specified within the quotes while 
double quotes interpolate the input and display the variable's value

2. What this condition checks: if [ -z $b ]?
this condition is checking whether the variable b is an empty string 

3. What is the difference between while and until cycles? 
The while loop stops when the specified condition becomes false, the until loop stops when the specified condition becomes true

4. Why do we need the \ character between quotes in the text?
It is used to indicate that the character following it should be treated literally and not as a special character with its usual meaning

5. Why you should avoid special characters in the filename? 
because it can cause compatibility issues with different operating systems and applications

6. What this condition checks: if [ $a -ge $b ]?
this condition checks if the value of the variable $a is greater than or equal to the value of the variable $b

7. When the cycle will stop: while [ $a -gt $b ]?
this loop will to execute as long as $a is greater than $b so once it is less, it will stop.

8. What continue command is used for? 
continue is used to skip the current iteration in for, while, and until loops


