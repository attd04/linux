
--- Task 1 ---
# Create two directories
mkdir d1 d2

In one of directories create 1000 files with different names. 
The format of the file name: XY.txt, where X is a number, Y â€“ letters from a to z.

COUNTER=0
for x in {a..z}; do
    for y in {0..9}; do
        let COUNTER++
        if [ $COUNTER -le 1000 ]; then
            touch "d1/$x$y.txt"
        fi
    done
done

Display both directories and their contents (recursively)
echo "Directories d1 and d2 after step 2:"
ls -R

Read the letter entered by the user
read -p "Enter a letter: " letter


# Copy files with the specified letter from d1 to d2
find d1 -name "*$letter*.txt" -exec cp {} d2 \;

Display both directories and their contents (recursively)
echo "Directories d1 and d2 after step 5:"
ls -R



--- task 2 ---

First script:

Create directory
mkdir d1

In directory create 1200 files with different names.
The format of the file name: XXX.txt, where X are letters from a to z.

COUNTER = 0
for x in {a..z}; do
    for y in {a..z}; do
        for z in {a..z}; do
            let COUNTER++
            if [ $COUNTER -le 1200 ]; then
                touch "d1/$x$y$z.txt"
            fi
        done
    done
done
        
# Read the letter entered by the user
read -p "Enter a letter: " letter

# Store in environment variable only files with the user specified letter in their name.
files_with_letter=$(find d1 -type f -name "*$letter*")

# run second script
./second_script.sh

# second script
# Display the contents of the directory and the number of files in them
echo "Contents of the directory:"
ls -R
echo "Number of files before deletion: $(find d1 -type f | wc -l)"

#Delete only files, which names are in the environment variable
if [ -n "$files_with_letter" ]; then
    rm $files_with_letter
fi

# Display the contents of the directory and the number of files in them
echo "Contents of the directory after deletion:"
ls -R d1
echo "Number of files after deletion: $(find d1 -type f | wc -l)"




theory: 
1. What $@ special variable is used for?
all of the parameters passed to the script

2. What basename command is used for?
strips directory information and suffixes from file names 

3. What is the difference between echo and printf commands?
printf has more precise control over what's being printed so it's more suitable for numbers and decimals.
echo is good for printing text or strings because it has very little formatting requirements

4. Why do we need > symbol in the output?

